from typing import Any, ClassVar, overload

FFI_CDECL: int
FFI_DEFAULT_ABI: int
RTLD_DEEPBIND: int
RTLD_GLOBAL: int
RTLD_LAZY: int
RTLD_LOCAL: int
RTLD_NODELETE: int
RTLD_NOLOAD: int
RTLD_NOW: int
_C_API: PyCapsule

class CField:
    bitshift: Any
    bitsize: Any
    flags: Any
    offset: Any
    type: Any

class CLibrary:
    def close_lib(self, *args, **kwargs) -> Any: ...
    def load_function(self, *args, **kwargs) -> Any: ...
    def read_variable(self, *args, **kwargs) -> Any: ...
    def write_variable(self, *args, **kwargs) -> Any: ...

class CType:
    abi: Any
    args: Any
    cname: Any
    elements: Any
    ellipsis: Any
    fields: Any
    item: Any
    kind: Any
    length: Any
    relements: Any
    result: Any
    def __dir__(self) -> Any: ...

class FFI:
    class CData:
        __name__: ClassVar[str] = ...
        def __add__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __call__(self, *args, **kwargs) -> Any: ...
        def __complex__(self) -> Any: ...
        def __delattr__(self, name) -> Any: ...
        def __delitem__(self, other) -> Any: ...
        def __dir__(self) -> Any: ...
        def __enter__(self) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __exit__(self, type, value, traceback) -> Any: ...
        def __float__(self) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getitem__(self, index) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __iter__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __len__(self) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __setattr__(self, name, value) -> Any: ...
        def __setitem__(self, index, object) -> Any: ...
        def __sub__(self, other) -> Any: ...

    class CType:
        abi: Any
        args: Any
        cname: Any
        elements: Any
        ellipsis: Any
        fields: Any
        item: Any
        kind: Any
        length: Any
        relements: Any
        result: Any
        def __dir__(self) -> Any: ...

    class buffer:
        __hash__: ClassVar[None] = ...
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __delitem__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getitem__(self, index) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __len__(self) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __setitem__(self, index, object) -> Any: ...

    class error(Exception): ...
    NULL: ClassVar[_CDataBase] = ...
    RTLD_DEEPBIND: ClassVar[int] = ...
    RTLD_GLOBAL: ClassVar[int] = ...
    RTLD_LAZY: ClassVar[int] = ...
    RTLD_LOCAL: ClassVar[int] = ...
    RTLD_NODELETE: ClassVar[int] = ...
    RTLD_NOLOAD: ClassVar[int] = ...
    RTLD_NOW: ClassVar[int] = ...
    errno: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def addressof(self, *args, **kwargs) -> Any: ...
    def alignof(self, *args, **kwargs) -> Any: ...
    def callback(self, *args, **kwargs) -> Any: ...
    def cast(self, *args, **kwargs) -> Any: ...
    def def_extern(self, *args, **kwargs) -> Any: ...
    def dlclose(self, *args, **kwargs) -> Any: ...
    def dlopen(self, *args, **kwargs) -> Any: ...
    def from_buffer(self, *args, **kwargs) -> Any: ...
    def from_handle(self, *args, **kwargs) -> Any: ...
    def gc(self, *args, **kwargs) -> Any: ...
    def getctype(self, *args, **kwargs) -> Any: ...
    @overload
    def init_once(self, function, tag) -> Any: ...
    @overload
    def init_once() -> Any: ...
    def integer_const(self, *args, **kwargs) -> Any: ...
    def list_types(self, *args, **kwargs) -> Any: ...
    @overload
    def memmove(self, dest, src, n) -> Any: ...
    @overload
    def memmove() -> Any: ...
    def new(self, *args, **kwargs) -> Any: ...
    def new_allocator(self, *args, **kwargs) -> Any: ...
    def new_handle(self) -> Any: ...
    def offsetof(self, *args, **kwargs) -> Any: ...
    def release(self, *args, **kwargs) -> Any: ...
    def sizeof(self, *args, **kwargs) -> Any: ...
    def string(self, orunicodestring) -> Any: ...
    def typeof(self, *args, **kwargs) -> Any: ...
    def unpack(self, *args, **kwargs) -> Any: ...

class Lib:
    def __delattr__(self, name) -> Any: ...
    def __dir__(self) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class _CDataBase:
    __name__: ClassVar[str] = ...
    def __add__(self, other) -> Any: ...
    def __bool__(self) -> Any: ...
    def __call__(self, *args, **kwargs) -> Any: ...
    def __complex__(self) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __dir__(self) -> Any: ...
    def __enter__(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __exit__(self, type, value, traceback) -> Any: ...
    def __float__(self) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __int__(self) -> Any: ...
    def __iter__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...
    def __sub__(self, other) -> Any: ...

class __CDataFromBuf(_CDataBase): ...

class __CDataGCP(_CDataBase):
    def __del__(self, *args, **kwargs) -> Any: ...

class __CDataOwn(_CDataBase):
    def __delitem__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __len__(self) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class __CDataOwnGC(__CDataOwn): ...

class __CData_iterator:
    def __iter__(self) -> Any: ...
    def __next__(self) -> Any: ...

class __FFIGlobSupport: ...

class buffer:
    __hash__: ClassVar[None] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

def _get_common_types(*args, **kwargs) -> Any: ...
def _get_types(*args, **kwargs) -> Any: ...
def _init_cffi_1_0_external_module(*args, **kwargs) -> Any: ...
def _testbuff(*args, **kwargs) -> Any: ...
def _testfunc(*args, **kwargs) -> Any: ...
def alignof(*args, **kwargs) -> Any: ...
def callback(*args, **kwargs) -> Any: ...
def cast(*args, **kwargs) -> Any: ...
def complete_struct_or_union(*args, **kwargs) -> Any: ...
def from_buffer(*args, **kwargs) -> Any: ...
def from_handle(*args, **kwargs) -> Any: ...
def gcp(*args, **kwargs) -> Any: ...
def get_errno(*args, **kwargs) -> Any: ...
def getcname(*args, **kwargs) -> Any: ...
def load_library(*args, **kwargs) -> Any: ...
def memmove(*args, **kwargs) -> Any: ...
def new_array_type(*args, **kwargs) -> Any: ...
def new_enum_type(*args, **kwargs) -> Any: ...
def new_function_type(*args, **kwargs) -> Any: ...
def new_pointer_type(*args, **kwargs) -> Any: ...
def new_primitive_type(*args, **kwargs) -> Any: ...
def new_struct_type(*args, **kwargs) -> Any: ...
def new_union_type(*args, **kwargs) -> Any: ...
def new_void_type(*args, **kwargs) -> Any: ...
def newp(*args, **kwargs) -> Any: ...
def newp_handle(*args, **kwargs) -> Any: ...
def rawaddressof(*args, **kwargs) -> Any: ...
def release(*args, **kwargs) -> Any: ...
def set_errno(*args, **kwargs) -> Any: ...
def sizeof(*args, **kwargs) -> Any: ...
def string(*args, **kwargs) -> Any: ...
def typeof(*args, **kwargs) -> Any: ...
def typeoffsetof(*args, **kwargs) -> Any: ...
def unpack(*args, **kwargs) -> Any: ...
