from _typeshed import Incomplete
from typing import TypeAlias

from . import model as model
from .error import CDefError as CDefError
from .lock import allocate_lock as allocate_lock

basestring: TypeAlias = str

class FFI:
    BVoidP: Incomplete
    BCharA: Incomplete
    NULL: Incomplete
    buffer: Incomplete
    def __init__(self, backend: Incomplete | None = ...) -> None: ...
    def cdef(self, csource, override: bool = ..., packed: bool = ..., pack: Incomplete | None = ...) -> None: ...
    def embedding_api(self, csource, packed: bool = ..., pack: Incomplete | None = ...) -> None: ...
    def dlopen(self, name, flags: int = ...): ...
    def dlclose(self, lib) -> None: ...
    def typeof(self, cdecl): ...
    def sizeof(self, cdecl): ...
    def alignof(self, cdecl): ...
    def offsetof(self, cdecl, *fields_or_indexes): ...
    def new(self, cdecl, init: Incomplete | None = ...): ...
    def new_allocator(
        self, alloc: Incomplete | None = ..., free: Incomplete | None = ..., should_clear_after_alloc: bool = ...
    ): ...
    def cast(self, cdecl, source): ...
    def string(self, cdata, maxlen: int = ...): ...
    def unpack(self, cdata, length): ...
    def from_buffer(self, cdecl, python_buffer=..., require_writable: bool = ...): ...
    def memmove(self, dest, src, n): ...
    def callback(
        self, cdecl, python_callable: Incomplete | None = ..., error: Incomplete | None = ..., onerror: Incomplete | None = ...
    ): ...
    def getctype(self, cdecl, replace_with: str = ...): ...
    def gc(self, cdata, destructor, size: int = ...): ...
    verifier: Incomplete
    def verify(self, source: str = ..., tmpdir: Incomplete | None = ..., **kwargs): ...
    errno: Incomplete
    def getwinerror(self, code: int = ...): ...
    def addressof(self, cdata, *fields_or_indexes): ...
    def include(self, ffi_to_include) -> None: ...
    def new_handle(self, x): ...
    def from_handle(self, x): ...
    def release(self, x) -> None: ...
    def set_unicode(self, enabled_flag) -> None: ...
    def set_source(self, module_name, source, source_extension: str = ..., **kwds) -> None: ...
    def set_source_pkgconfig(self, module_name, pkgconfig_libs, source, source_extension: str = ..., **kwds) -> None: ...
    def distutils_extension(self, tmpdir: str = ..., verbose: bool = ...): ...
    def emit_c_code(self, filename) -> None: ...
    def emit_python_code(self, filename) -> None: ...
    def compile(self, tmpdir: str = ..., verbose: int = ..., target: Incomplete | None = ..., debug: Incomplete | None = ...): ...
    def init_once(self, func, tag): ...
    def embedding_init_code(self, pysource) -> None: ...
    def def_extern(self, *args, **kwds) -> None: ...
    def list_types(self): ...
